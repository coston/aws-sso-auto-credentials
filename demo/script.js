document.addEventListener("DOMContentLoaded", () => {
  // DOM elements
  const terminal = document.getElementById("terminal");
  const restartButton = document.getElementById("restart-demo");
  const toggleSpeedButton = document.getElementById("toggle-speed");
  const explanationContent = document.getElementById(
    "current-step-explanation"
  );
  const fileTabs = document.querySelectorAll(".file-tab");
  const fileContent = document.getElementById("file-content");

  // Demo state
  let demoRunning = false;
  let fastMode = false;
  let currentStep = 0;
  let userInputActive = false;
  let inputCallback = null;
  let inputValue = "";
  let cursorElement = null;

  // Speed settings
  const typingSpeed = {
    normal: 30, // ms per character
    fast: 5, // ms per character
  };
  const stepDelay = {
    normal: 1000, // ms between steps
    fast: 200, // ms between steps
  };

  // File contents
  const files = {
    config: `[profile engineering-sso]
region = us-east-1
sso_session = engineering-sso-session

[sso-session engineering-sso-session]
sso_region = us-east-1
sso_start_url = https://my-sso-portal.awsapps.com/start

[profile engineering-auto-credentials]
credential_process = bash ~/.aws/refresh-if-needed-engineering.sh --json
region = us-east-1`,
    script: `#!/usr/bin/env bash

# AWS SSO credential refresh script for profile: engineering-sso
# This script checks if the SSO session is valid and refreshes it if needed
# Generated by aws-sso-auto-credentials

set -e

# Function to check if jq is installed
check_jq() {
  if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed." >&2
    echo "Please install jq: https://stedolan.github.io/jq/download/" >&2
    exit 1
  fi
}

# Function to get credentials from SSO cache
get_sso_credentials() {
  local profile="$1"
  local cache_dir="$HOME/.aws/sso/cache"
  local latest_file=""
  local latest_time=0

  # Find the most recent cache file
  if [ -d "$cache_dir" ]; then
    for file in "$cache_dir"/*.json; do
      if [ -f "$file" ]; then
        # Check if file contains access token
        if grep -q "accessToken" "$file" 2>/dev/null; then
          file_time=$(stat -c %Y "$file" 2>/dev/null || stat -f %m "$file" 2>/dev/null)
          if [ "$file_time" -gt "$latest_time" ]; then
            latest_time=$file_time
            latest_file=$file
          fi
        fi
      fi
    done
  fi

  # If we found a cache file, check if it's valid
  if [ -n "$latest_file" ]; then
    # Extract expiration time
    if command -v jq &> /dev/null; then
      expiration=$(jq -r '.expiresAt' "$latest_file" 2>/dev/null)
      if [ -n "$expiration" ] && [ "$expiration" != "null" ]; then
        # Convert expiration to timestamp
        expiration_timestamp=$(date -d "$expiration" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$expiration" +%s 2>/dev/null)
        current_timestamp=$(date +%s)

        # Add buffer time (5 minutes) to ensure we refresh before expiration
        buffer_time=300
        if [ "$((expiration_timestamp - current_timestamp))" -gt "$buffer_time" ]; then
          # Token is still valid, no need to refresh
          return 0
        fi
      fi
    fi
  fi

  # If we get here, we need to refresh the token
  return 1
}

# Function to get AWS credentials
get_aws_credentials() {
  # Check if we need to refresh SSO login
  if ! get_sso_credentials "engineering-sso"; then
    echo "SSO session expired or not found. Refreshing..." >&2
    aws sso login --profile "engineering-sso" >&2
    if [ $? -ne 0 ]; then
      echo "Failed to refresh SSO session" >&2
      exit 1
    fi
  fi

  # Use the AWS CLI to get credentials directly
  # This is a simpler approach that should work with all AWS CLI versions

  # Create a temporary credentials file
  local temp_creds_file=$(mktemp)

  # Use the AWS CLI to get caller identity with the SSO profile
  # This forces the CLI to resolve the SSO credentials
  aws sts get-caller-identity --profile "engineering-sso" > /dev/null 2>&1

  if [ $? -ne 0 ]; then
    echo "Failed to get caller identity with SSO profile" >&2
    rm -f "$temp_creds_file"
    exit 1
  fi

  # Now export the credentials to the temporary file
  # We'll use the environment variables that the AWS CLI sets
  AWS_PROFILE="engineering-sso" aws configure export-credentials --format process > "$temp_creds_file" 2>/dev/null

  if [ $? -ne 0 ]; then
    # If export-credentials fails, try a different approach
    echo "Failed to export credentials, trying alternative method" >&2

    # Get credentials from the AWS CLI cache
    local credentials_file="$HOME/.aws/cli/cache/engineering-sso.json"
    if [ -f "$credentials_file" ]; then
      cat "$credentials_file" > "$temp_creds_file"
    else
      echo "Could not find cached credentials" >&2
      rm -f "$temp_creds_file"
      exit 1
    fi
  fi

  # Check if the file contains the Version field
  if ! grep -q "Version" "$temp_creds_file"; then
    # If not, add it
    local temp_fixed_file=$(mktemp)
    jq '. + {Version: "1"}' "$temp_creds_file" > "$temp_fixed_file"
    mv "$temp_fixed_file" "$temp_creds_file"
  fi

  # Output the credentials
  cat "$temp_creds_file"

  # Clean up
  rm -f "$temp_creds_file"
}

# Main execution
if [ "$1" = "--json" ]; then
  check_jq
  get_aws_credentials
else
  get_aws_credentials >/dev/null
  echo "AWS credentials refreshed successfully"
fi`,
  };

  // Demo script - each step in the demo
  const demoSteps = [
    {
      type: "output",
      content: "\n\x1b[34mℹ\x1b[0m AWS SSO Auto-Credentials Setup\n",
      explanation:
        "The AWS SSO Auto-Credentials tool helps you set up auto-refreshing credentials for AWS IAM Identity Center (formerly AWS SSO). This eliminates the need to manually refresh your credentials.",
    },
    {
      type: "output",
      content: "Checking environment...",
      explanation:
        "The tool first checks your environment to ensure you have the necessary prerequisites installed, such as AWS CLI v2 and jq (for Linux/macOS).",
    },
    {
      type: "output",
      content: "\x1b[32m✓\x1b[0m Checking environment completed",
      explanation:
        "The environment check has passed. This means you have all the necessary tools installed to use AWS SSO Auto-Credentials.",
    },
    {
      type: "output",
      content:
        "\n\x1b[34mℹ\x1b[0m Reading AWS config file: /Users/username/.aws/config",
      explanation:
        "The tool checks for existing AWS SSO profiles in your AWS config file. This helps determine if you already have SSO profiles set up.",
    },
    {
      type: "output",
      content: "\x1b[34mℹ\x1b[0m Found 0 SSO profiles",
      explanation:
        "No existing AWS SSO profiles were found in your config file. The tool will guide you through setting up a new profile.",
    },
    {
      type: "output",
      content: "\n\x1b[34mℹ\x1b[0m No existing AWS SSO profiles found.",
      explanation:
        "Since no existing profiles were found, the tool will help you create a new one from scratch.",
    },
    {
      type: "output",
      content: "\n\x1b[34mℹ\x1b[0m Running 'aws configure sso'...",
      explanation:
        'The tool runs the AWS CLI\'s built-in "aws configure sso" command to set up your SSO configuration. This will prompt you for your SSO start URL, region, and other details.',
    },
    {
      type: "input",
      prompt: "SSO session name (Recommended): ",
      defaultValue: "default-sso",
      explanation:
        "You're being asked to provide a name for your SSO session. This is used to identify your SSO configuration in the AWS config file.",
    },
    {
      type: "input",
      prompt: "SSO start URL [None]: ",
      defaultValue: "https://my-sso-portal.awsapps.com/start",
      explanation:
        "This is the URL where you access your AWS SSO portal. Your organization's SSO administrator should provide this URL to you.",
    },
    {
      type: "input",
      prompt: "SSO Region [us-east-1]: ",
      defaultValue: "us-east-1",
      explanation:
        "This is the AWS region where your SSO directory is hosted. It may be different from the regions where your resources are located.",
    },
    {
      type: "output",
      content:
        "Attempting to automatically open the SSO authorization page in your default browser.\nIf the browser does not open or you wish to use a different device to authorize this request, open the following URL:\n\nhttps://device.sso.us-east-1.amazonaws.com/\n\nThen enter the code: ABCD-EFGH",
      explanation:
        "The AWS CLI is opening your browser to authenticate with AWS SSO. In a real scenario, you would log in with your SSO credentials to authorize the CLI.",
    },
    {
      type: "output",
      content:
        "Successfully logged into SSO session default-sso\n\nThere are 2 AWS accounts available to you.\n1 - Development Account (123456789012)\n2 - Production Account (987654321098)",
      explanation:
        "After successful authentication, the AWS CLI shows you the AWS accounts you have access to through SSO. You'll select one of these accounts to work with.",
    },
    {
      type: "input",
      prompt: "Account: ",
      defaultValue: "1",
      explanation:
        "Select the AWS account you want to use. In this demo, we're selecting the Development Account.",
    },
    {
      type: "output",
      content:
        "Using the account ID 123456789012\n\nThere are 2 roles available to you.\n1 - ReadOnly\n2 - Administrator",
      explanation:
        "Now you need to select which role (permission set) you want to use with this account. Different roles have different levels of access.",
    },
    {
      type: "input",
      prompt: "Role: ",
      defaultValue: "2",
      explanation:
        "Select the role you want to use. In this demo, we're selecting the Administrator role, which has full access to the account.",
    },
    {
      type: "input",
      prompt: "CLI default client Region [us-east-1]: ",
      defaultValue: "us-east-1",
      explanation:
        "This is the default AWS region that will be used when you run AWS CLI commands with this profile.",
    },
    {
      type: "input",
      prompt: "CLI default output format [json]: ",
      defaultValue: "json",
      explanation:
        "This is the default output format for AWS CLI commands. JSON is the most common format and is used for programmatic access.",
    },
    {
      type: "input",
      prompt: "CLI profile name [Administrator-123456789012]: ",
      defaultValue: "Administrator-123456789012",
      explanation:
        "This is the name of the AWS CLI profile that will be created. You'll use this name to reference this configuration in the future.",
    },
    {
      type: "output",
      content: "\n\x1b[32m✓\x1b[0m AWS SSO configuration successful!",
      explanation:
        "The AWS SSO configuration has been successfully created. Now the tool will use this configuration to set up auto-refreshing credentials.",
    },
    {
      type: "output",
      content:
        "\x1b[34mℹ\x1b[0m Found newly created profile 'Administrator-123456789012' from aws configure sso",
      explanation:
        "The tool has detected the new profile you created with the AWS CLI. It will use this profile as the basis for your auto-refreshing credentials setup.",
    },
    {
      type: "output",
      content:
        "\x1b[34mℹ\x1b[0m Using newly created profile 'Administrator-123456789012' for auto-credentials setup",
      explanation:
        "The tool will now create two profiles: a base SSO profile and an auto-credentials profile that uses the refresh script.",
    },
    {
      type: "input",
      prompt:
        "Enter a prefix for your AWS profiles (e.g., engineering, platform): ",
      defaultValue: "engineering",
      explanation:
        'This prefix will be used to name your AWS profiles. For example, if you enter "engineering", your profiles will be named "engineering-sso" and "engineering-auto-credentials".',
    },
    {
      type: "output",
      content: "Creating SSO profile...",
      explanation:
        "The tool is creating a base SSO profile in your AWS config file. This profile will be used for AWS CLI SSO login maintenance.",
    },
    {
      type: "output",
      content: "\x1b[32m✓\x1b[0m Creating SSO profile completed",
      explanation:
        "The base SSO profile has been successfully created. This profile contains your SSO start URL, region, account ID, and role name.",
    },
    {
      type: "output",
      content: "Created SSO profile: engineering-sso",
      explanation:
        'The base SSO profile "engineering-sso" has been created in your AWS config file. This profile will be used to maintain your SSO login session.',
    },
    {
      type: "output",
      content: "Creating refresh script...",
      explanation:
        "The tool is creating a shell script that will automatically check if your SSO session is valid and refresh it if needed. This script will be called by the auto-credentials profile.",
    },
    {
      type: "output",
      content: "\x1b[32m✓\x1b[0m Creating refresh script completed",
      explanation:
        "The refresh script has been successfully created. This script checks if your SSO session is valid and refreshes it only when necessary.",
    },
    {
      type: "output",
      content:
        "Created refresh script: /Users/username/.aws/refresh-if-needed-engineering.sh",
      explanation:
        "The refresh script has been created at the specified path. This script will be called by the auto-credentials profile to ensure your credentials are always valid.",
    },
    {
      type: "output",
      content: "Creating auto-credentials profile...",
      explanation:
        "The tool is creating an auto-credentials profile in your AWS config file. This profile uses the credential_process mechanism to invoke the refresh script.",
    },
    {
      type: "output",
      content: "\x1b[32m✓\x1b[0m Creating auto-credentials profile completed",
      explanation:
        "The auto-credentials profile has been successfully created. This profile will automatically refresh your credentials when needed.",
    },
    {
      type: "output",
      content: "Created auto-credentials profile: engineering-auto-credentials",
      explanation:
        'The auto-credentials profile "engineering-auto-credentials" has been created in your AWS config file. This is the profile you\'ll use for all your AWS operations.',
    },
    {
      type: "output",
      content: "\n\x1b[32m✓\x1b[0m Setup completed successfully!\n",
      explanation:
        "The setup process has been completed successfully. You now have auto-refreshing AWS SSO credentials set up on your machine.",
    },
    {
      type: "output",
      content: "\x1b[34mℹ\x1b[0m Initiating AWS SSO login...",
      explanation:
        "The tool is now logging you in with AWS SSO to ensure your credentials are ready to use immediately.",
    },
    {
      type: "output",
      content:
        "\x1b[34mℹ\x1b[0m This will open a browser window for authentication.",
      explanation:
        "In a real scenario, this would open your browser to authenticate with AWS SSO. You would log in with your SSO credentials to authorize the CLI.",
    },
    {
      type: "output",
      content: "\n\x1b[32m✓\x1b[0m AWS SSO login completed successfully!",
      explanation:
        "You have successfully logged in with AWS SSO. Your credentials are now ready to use.",
    },
    {
      type: "output",
      content:
        "\nTo use your AWS SSO credentials:\n  Use engineering-auto-credentials profile for all AWS commands:\n     AWS_PROFILE=engineering-auto-credentials aws sts get-caller-identity\n\nCredentials will be automatically refreshed when needed.",
      explanation:
        'These are the instructions for using your new auto-refreshing credentials. Set the AWS_PROFILE environment variable to "engineering-auto-credentials" when running AWS CLI commands.',
    },
    {
      type: "output",
      content: "\n\x1b[34mℹ\x1b[0m Validating setup...",
      explanation:
        "The tool is suggesting a command to validate your setup. Running this command will confirm that your credentials are working properly.",
    },
    {
      type: "output",
      content:
        "Run the following command to verify your setup:\n  AWS_PROFILE=engineering-auto-credentials aws sts get-caller-identity\n",
      explanation:
        "This command will verify that your auto-refreshing credentials are working correctly. It retrieves your AWS identity information using the new profile.",
    },
  ];

  // Initialize file tabs
  fileTabs.forEach((tab) => {
    tab.addEventListener("click", () => {
      // Remove active class from all tabs
      fileTabs.forEach((t) => t.classList.remove("active"));
      // Add active class to clicked tab
      tab.classList.add("active");
      // Update file content
      const fileType = tab.getAttribute("data-file");
      fileContent.textContent =
        files[fileType] || "File content not available.";
    });
  });

  // Set the first tab as active by default
  fileTabs[0].click();

  // Function to add a new line to the terminal
  function addTerminalLine(content, className = "") {
    const line = document.createElement("div");
    line.className = className ? `terminal-line ${className}` : "terminal-line";
    line.innerHTML = content;
    terminal.appendChild(line);
    terminal.scrollTop = terminal.scrollHeight;
    return line;
  }

  // Function to simulate typing
  async function typeText(element, text, speed) {
    let i = 0;
    while (i < text.length) {
      element.textContent += text.charAt(i);
      i++;
      await new Promise((resolve) => setTimeout(resolve, speed));
    }
  }

  // Function to format ANSI color codes to HTML
  function formatAnsiToHtml(text) {
    // Replace ANSI color codes with CSS classes
    return text
      .replace(
        /\x1b\[32m([^\x1b]*)\x1b\[0m/g,
        '<span class="success">$1</span>'
      ) // Success (green)
      .replace(/\x1b\[31m([^\x1b]*)\x1b\[0m/g, '<span class="error">$1</span>') // Error (red)
      .replace(
        /\x1b\[33m([^\x1b]*)\x1b\[0m/g,
        '<span class="warning">$1</span>'
      ) // Warning (yellow)
      .replace(/\x1b\[34m([^\x1b]*)\x1b\[0m/g, '<span class="info">$1</span>'); // Info (blue)
  }

  // Function to handle user input
  function setupUserInput(prompt, defaultValue, callback) {
    userInputActive = true;
    inputValue = "";
    inputCallback = callback;

    // Create input line
    const inputLine = document.createElement("div");
    inputLine.className = "input-line";

    // Add prompt
    const promptElement = document.createElement("span");
    promptElement.className = "input-prompt";
    promptElement.textContent = prompt;
    inputLine.appendChild(promptElement);

    // Add input area
    const inputArea = document.createElement("span");
    inputArea.className = "input-area";
    inputLine.appendChild(inputArea);

    // Add cursor
    cursorElement = document.createElement("span");
    cursorElement.className = "cursor";
    inputArea.appendChild(cursorElement);

    terminal.appendChild(inputLine);
    terminal.scrollTop = terminal.scrollHeight;

    // Auto-complete after a delay in demo mode
    setTimeout(
      () => {
        if (userInputActive) {
          completeUserInput(defaultValue);
        }
      },
      fastMode ? 500 : 2000
    );
  }

  // Function to complete user input
  async function completeUserInput(value) {
    if (!userInputActive) return;

    // Remove cursor
    if (cursorElement) {
      cursorElement.remove();
      cursorElement = null;
    }

    // Get input line and area
    const inputLine = terminal.lastElementChild;
    const inputArea = inputLine.querySelector(".input-area");

    // Type the value
    await typeText(
      inputArea,
      value,
      fastMode ? typingSpeed.fast : typingSpeed.normal
    );

    // Complete input
    userInputActive = false;
    inputValue = value;

    // Call callback
    if (inputCallback) {
      inputCallback(value);
      inputCallback = null;
    }
  }

  // Function to process a demo step
  async function processStep(step) {
    // Update explanation
    explanationContent.innerHTML = `<p>${step.explanation}</p>`;

    if (step.type === "output") {
      // Format ANSI color codes
      const formattedContent = formatAnsiToHtml(step.content);
      // Add output line
      addTerminalLine(`<span class="output">${formattedContent}</span>`);
      // Return promise that resolves after delay
      return new Promise((resolve) =>
        setTimeout(resolve, fastMode ? stepDelay.fast : stepDelay.normal)
      );
    } else if (step.type === "input") {
      // Return promise that resolves when input is complete
      return new Promise((resolve) => {
        setupUserInput(step.prompt, step.defaultValue, () => {
          resolve();
        });
      });
    }
  }

  // Function to run the demo
  async function runDemo() {
    demoRunning = true;
    currentStep = 0;

    // Clear terminal
    terminal.innerHTML = "";
    addTerminalLine(
      '<span class="prompt">$</span><span class="command">npx aws-sso-auto-credentials</span>'
    );

    // Process each step
    while (currentStep < demoSteps.length && demoRunning) {
      await processStep(demoSteps[currentStep]);
      currentStep++;
    }

    demoRunning = false;
  }

  // Event listeners
  restartButton.addEventListener("click", () => {
    if (demoRunning) {
      demoRunning = false;
      setTimeout(runDemo, 500);
    } else {
      runDemo();
    }
  });

  toggleSpeedButton.addEventListener("click", () => {
    fastMode = !fastMode;
    toggleSpeedButton.textContent = fastMode ? "Normal Speed" : "Fast Speed";
  });

  // Start the demo automatically
  setTimeout(runDemo, 1000);
});
