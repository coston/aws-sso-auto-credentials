import os from "os";
import path from "path";
import fileSystem from "./fs/fileSystem";

interface RefreshScriptOptions {
  scriptPath: string;
  profileName: string;
  force?: boolean;
}

/**
 * Create the refresh script that checks if SSO session is valid and refreshes if needed
 */
export async function createRefreshScript(
  options: RefreshScriptOptions
): Promise<void> {
  // Check if script already exists
  if ((await fileSystem.pathExists(options.scriptPath)) && !options.force) {
    throw new Error(
      `Script ${options.scriptPath} already exists. Use --force to overwrite.`
    );
  }

  // Ensure directory exists
  await fileSystem.ensureDir(path.dirname(options.scriptPath));

  // Generate script content
  const scriptContent = generateRefreshScriptContent(options.profileName);

  // Write script to file
  await fileSystem.writeFile(options.scriptPath, scriptContent);

  // Make script executable (not applicable on Windows)
  if (os.platform() !== "win32") {
    await fileSystem.chmod(options.scriptPath, 0o755);
  }
}

/**
 * Generate the content of the refresh script
 */
function generateRefreshScriptContent(profileName: string): string {
  return `#!/usr/bin/env bash

# AWS SSO credential refresh script for profile: ${profileName}
# This script checks if the SSO session is valid and refreshes it if needed
# Generated by aws-sso-auto-credentials

set -e

# Function to check if jq is installed
check_jq() {
  if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed." >&2
    echo "Please install jq: https://stedolan.github.io/jq/download/" >&2
    exit 1
  fi
}

# Function to get credentials from SSO cache
get_sso_credentials() {
  local profile="$1"
  local cache_dir="$HOME/.aws/sso/cache"
  local latest_file=""
  local latest_time=0

  # Find the most recent cache file
  if [ -d "$cache_dir" ]; then
    for file in "$cache_dir"/*.json; do
      if [ -f "$file" ]; then
        # Check if file contains access token
        if grep -q "accessToken" "$file" 2>/dev/null; then
          file_time=$(stat -c %Y "$file" 2>/dev/null || stat -f %m "$file" 2>/dev/null)
          if [ "$file_time" -gt "$latest_time" ]; then
            latest_time=$file_time
            latest_file=$file
          fi
        fi
      fi
    done
  fi

  # If we found a cache file, check if it's valid
  if [ -n "$latest_file" ]; then
    # Extract expiration time
    if command -v jq &> /dev/null; then
      expiration=$(jq -r '.expiresAt' "$latest_file" 2>/dev/null)
      if [ -n "$expiration" ] && [ "$expiration" != "null" ]; then
        # Convert expiration to timestamp
        expiration_timestamp=$(date -d "$expiration" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$expiration" +%s 2>/dev/null)
        current_timestamp=$(date +%s)

        # Add buffer time (5 minutes) to ensure we refresh before expiration
        buffer_time=300
        if [ "$((expiration_timestamp - current_timestamp))" -gt "$buffer_time" ]; then
          # Token is still valid, no need to refresh
          return 0
        fi
      fi
    fi
  fi

  # If we get here, we need to refresh the token
  return 1
}

# Function to get AWS credentials
get_aws_credentials() {
  # Check if we need to refresh SSO login
  if ! get_sso_credentials "${profileName}"; then
    echo "SSO session expired or not found. Refreshing..." >&2
    aws sso login --profile "${profileName}" >&2
    if [ $? -ne 0 ]; then
      echo "Failed to refresh SSO session" >&2
      exit 1
    fi
  fi

  # Get credentials
  aws sts get-caller-identity --profile "${profileName}" --output json
}

# Main execution
if [ "$1" = "--json" ]; then
  check_jq
  get_aws_credentials
else
  get_aws_credentials >/dev/null
  echo "AWS credentials refreshed successfully"
fi
`;
}
